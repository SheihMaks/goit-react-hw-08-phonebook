{"version":3,"file":"static/js/293.153158f7.chunk.js","mappings":"+QAEaA,EAAoBC,EAAAA,GAAAA,IAAD,0CAInBC,EAAWD,EAAAA,GAAAA,KAAD,mKAUVE,EAAyBF,EAAAA,GAAAA,MAAD,uDAIxBG,EAAUH,EAAAA,GAAAA,KAAD,wBAGTI,EAAsBJ,EAAAA,GAAAA,MAAD,gE,uCCdrBK,EAAW,WACpB,OAAqBC,EAAAA,EAAAA,UAAS,IAA9B,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAuBF,EAAAA,EAAAA,UAAS,IAAhC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAA6BJ,EAAAA,EAAAA,UAAS,IAAtC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA+BN,EAAAA,EAAAA,WAAS,GAAxC,eAAOO,EAAP,KAAiBC,EAAjB,KACMC,GAAqBC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,sBACvC,GAA4BC,EAAAA,EAAAA,MAArBC,GAAP,eACMC,GAAOC,EAAAA,EAAAA,MACPC,GAAQD,EAAAA,EAAAA,MACRE,GAAWF,EAAAA,EAAAA,MAEXG,EAAc,SAACC,GACjB,MAAkBA,EAAEC,cAAdnB,EAAN,EAAMA,KAAKoB,EAAX,EAAWA,MACX,OAAOpB,GACH,IAAK,OAAOC,EAAQmB,GACpB,MACA,IAAK,QAAQjB,EAASiB,GACtB,MACA,IAAK,WAAWf,EAAYe,GAC5B,MACA,QAAQC,OAAOC,MAAM,wLAcnBC,EAAW,WACbtB,EAAQ,IACRE,EAAS,IACTE,EAAY,KAGpB,OAAO,SAACb,EAAD,WACH,UAACE,EAAD,CAAY8B,SAlBW,SAACN,GACpBA,EAAEO,iBACFlB,GAAa,GACI,KAAdP,EAAK0B,QAA8B,KAAfxB,EAAMwB,QAAiC,KAAlBtB,EAASsB,QAIrDd,EAAoB,CAACZ,KAAAA,EAAKE,MAAAA,EAAME,SAAAA,IAChCmB,KAJIhB,GAAa,IAcrB,WACR,UAACZ,EAAD,YAA0B,SAACC,EAAD,qBAC1B,SAACC,EAAD,CACAG,KAAK,OACL2B,KAAK,OACLP,MAAOpB,EACP4B,GAAIf,EACJgB,SAAUZ,EACVa,YAAY,wBAEZ,UAACnC,EAAD,YAA0B,SAACC,EAAD,sBAC1B,SAACC,EAAD,CACAG,KAAK,QACL2B,KAAK,QACLP,MAAOlB,EACP0B,GAAIb,EACJc,SAAUZ,EACVa,YAAY,yBAEZ,UAACnC,EAAD,YAA0B,SAACC,EAAD,yBAC1B,SAACC,EAAD,CACAG,KAAK,WACL2B,KAAK,OACLP,MAAOhB,EACPwB,GAAIZ,EACJa,SAAUZ,EACVa,YAAY,2BAEXxB,IAAa,SAACyB,EAAA,EAAD,CAAcC,aAAa,oCACxCxB,IAAwB,SAACuB,EAAA,EAAD,CAAcC,aAAa,+BACpD,SAACC,EAAA,EAAD,CAAQC,WAAW,oB,oEC9ENC,E,QAAoB1C,GAAAA,OAAD,wB,SCCnBwC,EAAO,SAAC,GAAgB,IAAfC,EAAc,EAAdA,WACtB,OAAO,SAACC,EAAD,CAAqBR,KAAK,SAA1B,SAAoCO,M,gFCD9BE,EAAsB3C,EAAAA,GAAAA,IAAD,2EAKrB4C,EAAU5C,EAAAA,GAAAA,EAAD,6D,SCLTsC,EAAa,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACxB,OAAO,SAACI,EAAD,WACH,SAACC,EAAD,UAAYL,Q,sDCJb,IAkBIlB,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACd,EAAIe,GAWvD,OAREf,IAFFe,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["Pages/RegistPage/RegistPage.styled.js","Pages/RegistPage/RegistPage.jsx","components/Buttons/ButtonLogInAndRegistration/Button.styled.js","components/Buttons/ButtonLogInAndRegistration/Button.jsx","components/ErrorInInput/ErrorInInput.styled.js","components/ErrorInInput/ErrorInInput.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const RegistFormContainer=styled.div`\npadding:10% 30%;\n`\n\nexport const FormRegist=styled.form`\ndisplay:flex;\nflex-direction:column;\nrow-gap:15px;\npadding:5% 8%;\nborder:1px solid grey;\nborder-radius:7px;\nbackground-color:#bdeff2;`\n\n\nexport const LabelForRegistrationForm=styled.label`\ndisplay:flex;\ncolumn-gap:10px;`\n\nexport const NameInput=styled.span`\n`\n\nexport const InputRegistrationForm=styled.input`\nwidth:100%;\nbackground-color:#eef5e9;\n`","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { authSelectors } from \"components/Redux/sliceAuth\";\nimport { nanoid } from \"nanoid\";\nimport { RegistFormContainer,FormRegist,LabelForRegistrationForm,NameInput,InputRegistrationForm } from \"./RegistPage.styled\";\nimport { Button } from \"components/Buttons/ButtonLogInAndRegistration/Button\";\nimport { useRegistrationNewUserMutation } from \"components/Redux/FetchUser\";\nimport { ErrorInInput } from \"components/ErrorInInput/ErrorInInput\";\n\nexport const RegistPage=()=>{\n    const [name,setName]=useState('')\n    const [email,setEmail]=useState('')\n    const [password,setPassword]=useState('')\n    const [errorForm,setErrorForm]=useState(false)\n    const rejectedRegistration=useSelector(authSelectors.getErrorRegistration)\n    const [registrationNewUser]=useRegistrationNewUserMutation()\n    const nameId=nanoid()\n    const emailId=nanoid()\n    const passwordId=nanoid()\n\n    const onHandleInput=(e)=>{\n        const{name,value}=e.currentTarget\n        switch(name){\n            case 'name':setName(value)\n            break;\n            case 'email':setEmail(value)\n            break;\n            case 'password':setPassword(value)\n            break;\n            default:window.alert('Такой тип ввода не обрабатывается')\n            }\n        }\n        const FormHandleSubmit=(e)=>{\n            e.preventDefault()\n            setErrorForm(false)\n            if(name.trim()==='' || email.trim()==='' || password.trim()===''){\n                setErrorForm(true)\n                return\n            }\n            registrationNewUser({name,email,password})\n            resetState()\n        }\n\n        const resetState=()=>{\n            setName('');\n            setEmail('');\n            setPassword('')\n        }\n    \n    return(<RegistFormContainer>\n        <FormRegist onSubmit={FormHandleSubmit}>\n<LabelForRegistrationForm><NameInput>Name:</NameInput>\n<InputRegistrationForm\nname='name'\ntype='text'\nvalue={name}\nid={nameId}\nonChange={onHandleInput}\nplaceholder='Enter your name'\n/></LabelForRegistrationForm>\n<LabelForRegistrationForm><NameInput>Email:</NameInput>\n<InputRegistrationForm\nname='email'\ntype='email'\nvalue={email}\nid={emailId}\nonChange={onHandleInput}\nplaceholder='Enter your email'\n/></LabelForRegistrationForm>\n<LabelForRegistrationForm><NameInput>Password:</NameInput>\n<InputRegistrationForm\nname='password'\ntype='text'\nvalue={password}\nid={passwordId}\nonChange={onHandleInput}\nplaceholder='Enter your password'\n/></LabelForRegistrationForm>\n{errorForm && <ErrorInInput errorMessage='Please fill in all input fields'/>}\n{rejectedRegistration && <ErrorInInput errorMessage='Invalid Email or password'/>}\n<Button buttonText=\"Register\"/>\n</FormRegist>\n</RegistFormContainer>\n    )\n}","import styled from \"styled-components\";\n\nexport const ButtonLogAndRegForm=styled.button`\n`","import PropTypes from 'prop-types';\nimport { ButtonLogAndRegForm } from \"./Button.styled\";\n\nexport const Button=({buttonText})=>{\nreturn(<ButtonLogAndRegForm type='submit'>{buttonText}</ButtonLogAndRegForm>)}\n\nButton.propTypes={\n    buttonText: PropTypes.string.isRequired,\n}","import styled from \"styled-components\";\n\n\nexport const ErrorInInputContainer=styled.div`\nborder:1px solid grey;\nbackground-color:#ffebeb;\n`\n\nexport const ErrorText=styled.p`\ntext-align:center;\nfont-size:14px;\n`","import PropTypes from 'prop-types';\nimport { ErrorInInputContainer, ErrorText } from \"./ErrorInInput.styled\";\n\nexport const ErrorInInput=({errorMessage})=>{\n    return(<ErrorInInputContainer>\n        <ErrorText>{errorMessage}</ErrorText>\n    </ErrorInInputContainer>)\n}\n\nErrorInInput.propTypes={\n    errorMessage:PropTypes.string.isRequired,\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegistFormContainer","styled","FormRegist","LabelForRegistrationForm","NameInput","InputRegistrationForm","RegistPage","useState","name","setName","email","setEmail","password","setPassword","errorForm","setErrorForm","rejectedRegistration","useSelector","authSelectors","useRegistrationNewUserMutation","registrationNewUser","nameId","nanoid","emailId","passwordId","onHandleInput","e","currentTarget","value","window","alert","resetState","onSubmit","preventDefault","trim","type","id","onChange","placeholder","ErrorInInput","errorMessage","Button","buttonText","ButtonLogAndRegForm","ErrorInInputContainer","ErrorText","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}