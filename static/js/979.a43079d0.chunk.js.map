{"version":3,"file":"static/js/979.a43079d0.chunk.js","mappings":"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","sources":["Pages/PhoneBookPage/PhoneBookPage.styled.js","components/PhoneContactForm/ContactForm.styled.js","components/PhoneContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/Contacts/Contacts.styled.js","components/Contacts/Contacts.jsx","components/UserFilter/Filter.styled.js","components/UserFilter/Filter.jsx","Pages/PhoneBookPage/PhoneBookPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const PhonebookApp=styled.div`\npadding:0.5% 2.5%;\nmargin: 4% auto 9% auto;\n\nwidth:60%;\nbackground-color:#94ffd1;\nborder-radius:7px;\n`\n\nexport const HeaderApp=styled.h1`\nfont-size:24px;\n`\nexport const HeaderSectionContacts=styled.h2`\nfont-size:22px;`","import styled from \"styled-components\";\n\nexport const ContactFormContainer=styled.div`\nwidth:auto%;\npadding:15px;\nborder: 1px solid black;\nborder-radius:5px;`\n\nexport const Form=styled.form`font-weight:600;\nfont-size:22px;`\n\nexport const LabelOfInputName=styled.label`\ndisplay:block;\nmargin-bottom:5px;\nfont-weight:600;\nfont-size:22px;`\n\nexport const Input=styled.input`\ndisplay:block;\nmargin-bottom:20px;\nbackground-color:antiquewhite;`\n\nexport const Button=styled.button`\npadding:4px;\nborder: 1px solid grey;\nborder-radius:5px;\ncursor:pointer;\nbox-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.75);\n:hover{\n    background-color:white;\n};`\n\nexport const LabelOfInputPhone=styled.label`\ndisplay:block;\nmargin-bottom:5px;\nfont-weight:600;\nfont-size:22px;`","import {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport { nanoid } from \"nanoid\";\nimport {useAddContactsMutation} from 'components/Redux/fetchContacts';\nimport { ContactFormContainer,Button,Form,LabelOfInputName,Input, LabelOfInputPhone } from \"./ContactForm.styled\";\n\nexport const ContactForm =({contactsList})=>{\n  const [name,setName]=useState('');\n  const [number,setNumber]=useState('');\n  const inputNameId=nanoid();\n  const inputNumberId=nanoid();\n\n  const [addContacts]=useAddContactsMutation();\n\nconst onHandleInput=(e)=>{\n  const {name,value}=e.currentTarget\n    switch (name){\n      case 'name': setName(value)\n      break;\n      case 'number':setNumber(value)\n      break;\n      default: window.alert('Такой тип ввода не обрабатывается')\n    }}\n  \n  const onHandleSubmit=(e)=>{\n    e.preventDefault()\n    if (contactsList.find(el=>el.name===name)){\n      window.alert(`${name} is already in contacts`)} \n      else{console.log({name,number})\n        addContacts({name,number})}\n  reset()\n  }\n\n  const reset=()=>{\n    setName('')\n    setNumber('')\n}\n\nreturn(<ContactFormContainer><Form onSubmit={onHandleSubmit}><LabelOfInputName htmlFor={inputNameId}>Name</LabelOfInputName>\n    <Input\n  type=\"text\"\n  name=\"name\"\n  value={name}\n  onChange={onHandleInput}\n  id={inputNameId}\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  placeholder=\"Enter name...\"\n  required\n/>\n<LabelOfInputPhone htmlFor={inputNumberId}>Number</LabelOfInputPhone>\n<Input\n  type=\"tel\"\n  name=\"number\"\n  value={number}\n  onChange={onHandleInput}\n  id={inputNumberId}\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  placeholder=\"Enter number...\"\n  required\n/>\n<Button type='submit'>Add contact</Button></Form></ContactFormContainer>)\n}\n\nContactForm.propTypes={\n  contactsList:PropTypes.array,\n}","import styled from \"styled-components\";\n\nexport const ContactListItem=styled.li`\ndisplay:flex;\njustify-content:space-between;\nwidth:100%;\nfont-weight:600;\nmargin-bottom:10px;\n`\nexport const ContainerInputForEdit=styled.div`\ndisplay:flex;\ncolumn-gap:5px;\n`\nexport const InputForEdit=styled.input`\nwidth:45%;\nbackground-color:antiquewhite;\n`\n\nexport const ContactContainer=styled.div`\n`\nexport const Span=styled.span`\n`\n\nexport const ContainerButtonsItem=styled.div`\ndisplay:flex;\ncolumn-gap:5px;\n`\n\nexport const DeleteItemButton =styled.button`\nwidth:100%;\npadding:auto;\ncursor:pointer;\nbox-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.75);\n:hover{\n    background-color:white;\n};`\n\nexport const EditItemButton=styled.button`\nwidth:100%;\npadding:auto;\ncursor:pointer;\nbox-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.75);\n:hover{\n    background-color:white;\n};\n`","import PropTypes from 'prop-types';\nimport { useState } from \"react\";\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { getLoadState } from 'components/Redux/sliceContacts';\nimport { ContactListItem,ContactContainer,Span,ContainerInputForEdit,InputForEdit,ContainerButtonsItem,DeleteItemButton,EditItemButton } from \"./ContactItem.styled\"\nimport { useDeleteContactMutation } from 'components/Redux/fetchContacts';\nimport { useEditContactMutation } from 'components/Redux/fetchContacts';\n\nexport const ContactItem=({name,number,id})=>{\n    const[editableItemName,setEditableItemName]=useState(name);\n    const[editableItemNumber,setEditableItemNumber]=useState(number);\n    const[edit,setEdit]=useState(false);\n    const nameId=nanoid();\n    const numberId=nanoid();\n    const [deleteContact]=useDeleteContactMutation();\n    const [editContact]=useEditContactMutation();\n    const load=useSelector(getLoadState)\n    \n    const onEditInput=(e)=>{\n        const{name,value}=e.currentTarget;\n        switch (name){\n            case 'editableItemName': setEditableItemName(value)\n            break;\n            case 'editableItemNumber': setEditableItemNumber(value)\n            break;\n            default:window.alert('Такой тип ввода не обрабатывается')\n        }\n    };\n\n    const saveEditedContact=()=>{\n        setEdit(false)\n        if(name===editableItemName && number===editableItemNumber){\n            return\n        }\n        editContact({name:editableItemName,number:editableItemNumber,id})\n        \n    };\n    \n    return(<ContactListItem>\n    {edit ? \n    <ContainerInputForEdit>\n        <InputForEdit name='editableItemName' type='text' value={editableItemName} onChange={onEditInput} id={nameId} />\n        <InputForEdit name='editableItemNumber' type='text' value={editableItemNumber} onChange={onEditInput} id={numberId}/>\n    </ContainerInputForEdit> :\n    <ContactContainer>\n        <Span>{name}: {number}</Span>\n    </ContactContainer>}\n    <ContainerButtonsItem>\n    <EditItemButton type='button' \n    onClick={ !edit ? ()=>setEdit(true) : saveEditedContact}>{!edit ? 'Edit' : 'Save'}</EditItemButton>\n    <DeleteItemButton type='button' \n    onClick={()=>deleteContact(id)} disabled={load} >Delete</DeleteItemButton>\n    </ContainerButtonsItem>\n    </ContactListItem>)\n}\n\nContactItem.propTypes={\n    name:PropTypes.string.isRequired,\n    number:PropTypes.string.isRequired,\n    id:PropTypes.string.isRequired,\n}","import styled from \"styled-components\";\n\nexport const ContactsList=styled.ul`\npadding:0;\nmargin:0;\ndisplay:flex;\nflex-direction:column;\nwidth:100%;\nmargin-bottom:20px;\n`\n\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { ContactsList} from './Contacts.styled';\nimport { getFilter } from 'components/Redux/sliceContacts';\nimport { Spinner } from 'components/Spinner/Spinner';\n\n\nexport const Contacts=({contacts,onFetching})=>{\n    const onFilter=useSelector(getFilter)\n\n    const getContactsFiltered=()=>{\n        const normalizedFilterName=onFilter.toLowerCase()\n        return contacts.filter(el=> el.name.toLowerCase().includes(normalizedFilterName))\n        }\n        \n    const contactsList = getContactsFiltered();\n\n    return (<ContactsList>\n        {onFetching && <Spinner/>}\n        {contactsList.map((contact)=>{\n            const{id,name,number}=contact;\n            return (\n            <ContactItem \n            key={id} \n            name={name}\n            number={number}\n            id={id}\n            />)})}\n    </ContactsList>)\n}\n\nContacts.propTypes={\n    contacts:PropTypes.array.isRequired,\n    onFetching:PropTypes.bool.isRequired\n}","import styled from \"styled-components\";\n\nexport const LabelFilter=styled.label`\n`","import PropTypes from 'prop-types';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch,useSelector } from 'react-redux';\nimport { LabelFilter } from \"./Filter.styled\"\nimport { Input } from \"../PhoneContactForm/ContactForm.styled\";\nimport { setFilter,getFilter } from 'components/Redux/sliceContacts';\n\nexport const Filter=({title})=>{\n    const filterId=nanoid();\n    const dispatch=useDispatch()\n    const onFilter=useSelector(getFilter) \n\n    return (<><LabelFilter htmlFor={filterId}>{title}</LabelFilter>\n    <Input\n    type='text' \n    name='filter' \n    onChange={(e)=>dispatch(setFilter(e.currentTarget.value))} \n    value={onFilter}\n    id={filterId}\n    placeholder='Search...'\n    /></>)}\n\n    Filter.propTypes={\n        title:PropTypes.string.isRequired,\n    }","import React from \"react\";\nimport {PhonebookApp, HeaderApp, HeaderSectionContacts} from './PhoneBookPage.styled'\nimport { ContactForm } from \"components/PhoneContactForm/ContactForm\";\nimport {Contacts} from 'components/Contacts/Contacts';\nimport { Filter } from \"components/UserFilter/Filter\";\nimport {useGetContactsQuery} from 'components/Redux/fetchContacts';\n\nconst PhoneBookPage=()=>{\n  \n  const {data:contacts,isFetching}=useGetContactsQuery();\n  \n  return (<PhonebookApp>\n      <HeaderApp>Phonebook</HeaderApp>\n      <ContactForm \n      contactsList={contacts}\n      />\n      <HeaderSectionContacts>Contacts</HeaderSectionContacts>\n      <Filter \n      title='Find contacts by name'\n      />\n      {contacts && <Contacts onFetching={isFetching}\n      contacts={contacts}/>}\n    </PhonebookApp>)\n  }\n\n  export default PhoneBookPage","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["PhonebookApp","styled","HeaderApp","HeaderSectionContacts","ContactFormContainer","Form","LabelOfInputName","Input","Button","LabelOfInputPhone","ContactForm","contactsList","useState","name","setName","number","setNumber","inputNameId","nanoid","inputNumberId","useAddContactsMutation","addContacts","onHandleInput","e","currentTarget","value","window","alert","reset","onSubmit","preventDefault","find","el","console","log","htmlFor","type","onChange","id","pattern","title","placeholder","required","ContactListItem","ContainerInputForEdit","InputForEdit","ContactContainer","Span","ContainerButtonsItem","DeleteItemButton","EditItemButton","ContactItem","editableItemName","setEditableItemName","editableItemNumber","setEditableItemNumber","edit","setEdit","nameId","numberId","useDeleteContactMutation","deleteContact","useEditContactMutation","editContact","load","useSelector","getLoadState","onEditInput","onClick","disabled","ContactsList","Contacts","contacts","onFetching","onFilter","getFilter","normalizedFilterName","toLowerCase","filter","includes","getContactsFiltered","Spinner","map","contact","LabelFilter","Filter","filterId","dispatch","useDispatch","setFilter","useGetContactsQuery","data","isFetching","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}