{"version":3,"file":"static/js/535.3af75ff7.chunk.js","mappings":"+OAEaA,EAAcC,EAAAA,GAAAA,IAAD,0CAGbC,EAAKD,EAAAA,GAAAA,KAAD,mKASJE,EAAkBF,EAAAA,GAAAA,MAAD,yDAIjBG,EAAUH,EAAAA,GAAAA,KAAD,wBAETI,EAAeJ,EAAAA,GAAAA,MAAD,gE,qECsD3B,EAjEgB,WAChB,OAAsBK,EAAAA,EAAAA,UAAS,IAA/B,eAAMC,EAAN,KAAYC,EAAZ,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAMG,EAAN,KAAeC,EAAf,KACA,GAAsBJ,EAAAA,EAAAA,WAAS,GAA/B,eAAMK,EAAN,KAAYC,EAAZ,KACA,GAAcC,EAAAA,EAAAA,MAAPC,GAAP,eACMC,GAAQC,EAAAA,EAAAA,MACRC,GAAWD,EAAAA,EAAAA,MAEXE,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,gBAErBC,EAAc,SAACC,GACjB,MAAkBA,EAAEC,cAAdC,EAAN,EAAMA,KAAKC,EAAX,EAAWA,MACX,OAAOD,GACH,IAAK,QAAQhB,EAASiB,GACtB,MACA,IAAK,WAAWf,EAAYe,GAC5B,MACA,QAAQC,OAAOC,MAAM,wLAgBvBC,EAAW,WACbpB,EAAS,IACTE,EAAY,KAGhB,OAAO,SAACV,EAAD,WACP,UAACE,EAAD,CAAM2B,SAjBiB,SAACP,GACpBA,EAAEQ,iBACFlB,GAAS,GACU,KAAfL,EAAMwB,QAAiC,KAAlBtB,EAASsB,QAIlCjB,EAAM,CAACP,MAAAA,EAAME,SAAAA,IACbmB,KAJIhB,GAAS,IAajB,WACA,UAACT,EAAD,YAAmB,SAACC,EAAD,sBACnB,SAACC,EAAD,CACAmB,KAAK,QACLQ,KAAK,OACLC,SAAUZ,EACVI,MAAOlB,EACP2B,GAAInB,EACJoB,YAAY,yBAEZ,UAAChC,EAAD,YAAmB,SAACC,EAAD,yBACnB,SAACC,EAAD,CACAmB,KAAK,WACLQ,KAAK,OACLC,SAAUZ,EACVI,MAAOhB,EACPyB,GAAIjB,EACJkB,YAAY,4BAGVxB,GAASO,KAAa,SAACkB,EAAA,EAAD,CAAcC,aAAa,+BACnD,SAACC,EAAA,EAAD,CAAQC,WAAW,kB,oECnENC,E,QAAoBvC,GAAAA,OAAD,wB,SCCnBqC,EAAO,SAAC,GAAgB,IAAfC,EAAc,EAAdA,WACtB,OAAO,SAACC,EAAD,CAAqBR,KAAK,SAA1B,SAAoCO,M,gFCD9BE,EAAsBxC,EAAAA,GAAAA,IAAD,2EAKrByC,EAAUzC,EAAAA,GAAAA,EAAD,6D,SCLTmC,EAAa,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACxB,OAAO,SAACI,EAAD,WACH,SAACC,EAAD,UAAYL,Q,sDCJb,IAkBIrB,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACb,EAAIc,GAWvD,OAREd,IAFFc,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["Pages/LogInPage/LogInPage.styled.js","Pages/LogInPage/LogInPage.jsx","components/Buttons/ButtonLogInAndRegistration/Button.styled.js","components/Buttons/ButtonLogInAndRegistration/Button.jsx","components/ErrorInInput/ErrorInInput.styled.js","components/ErrorInInput/ErrorInInput.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormContainer=styled.div`\npadding:10% 30%;\n`\nexport const Form=styled.form`\ndisplay:flex;\nflex-direction:column;\nrow-gap:15px;\npadding:5% 8%;\nborder:1px solid grey;\nborder-radius:7px;\nbackground-color:#bdeff2;`\n\nexport const LabelForLogInForm=styled.label`\ndisplay:flex;\ncolumn-gap:10px;\n`\nexport const NameInput=styled.span`\n`\nexport const InputLogInForm=styled.input`\nwidth:100%;\nbackground-color:#eef5e9;\n`","import { useState } from \"react\"\nimport { FormContainer,Form,LabelForLogInForm,InputLogInForm,NameInput } from \"./LogInPage.styled\";\nimport { Button } from \"components/Buttons/ButtonLogInAndRegistration/Button\";\nimport { useLogInMutation,  } from \"components/Redux/FetchUser\"\nimport { nanoid } from \"nanoid\"\nimport { useSelector } from \"react-redux\"\nimport { authSelectors } from \"components/Redux/sliceAuth\"\nimport { ErrorInInput } from \"components/ErrorInInput/ErrorInInput\"\n\nconst LoginPage=()=>{\nconst[email,setEmail]=useState('')\nconst[password,setPassword]=useState('')\nconst[error,setError]=useState(false)\nconst [logIn]=useLogInMutation();\nconst emailId=nanoid()\nconst passwordId=nanoid()\n\nconst rejected=useSelector(authSelectors.getErrorServer)\n\nconst onHandleInput=(e)=>{\n    const{name,value}=e.currentTarget\n    switch(name){\n        case 'email':setEmail(value)\n        break;\n        case 'password':setPassword(value)\n        break;\n        default:window.alert('Такой тип ввода не обрабатывается')\n    }\n\n}\n\nconst formHandleSubmit=(e)=>{\n    e.preventDefault()\n    setError(false)\n    if (email.trim()==='' || password.trim()===''){\n        setError(true)\n        return\n    }  \n    logIn({email,password})\n    resetState()\n}\n\nconst resetState=()=>{\n    setEmail('')\n    setPassword('')\n}\n\nreturn(<FormContainer>\n<Form onSubmit={formHandleSubmit}>\n<LabelForLogInForm><NameInput>Email:</NameInput>\n<InputLogInForm\nname='email'\ntype='text'\nonChange={onHandleInput}\nvalue={email}\nid={emailId}\nplaceholder='Enter your email'\n/></LabelForLogInForm>\n<LabelForLogInForm><NameInput>Password:</NameInput>\n<InputLogInForm\nname='password'\ntype='text'\nonChange={onHandleInput}\nvalue={password}\nid={passwordId}\nplaceholder='Enter your password'\n\n/></LabelForLogInForm>\n{(error || rejected) && <ErrorInInput errorMessage='Invalid Email or password'/>}\n<Button buttonText=\"Log In\"/>\n</Form>\n</FormContainer>)\n}\n\nexport default LoginPage","import styled from \"styled-components\";\n\nexport const ButtonLogAndRegForm=styled.button`\n`","import PropTypes from 'prop-types';\nimport { ButtonLogAndRegForm } from \"./Button.styled\";\n\nexport const Button=({buttonText})=>{\nreturn(<ButtonLogAndRegForm type='submit'>{buttonText}</ButtonLogAndRegForm>)}\n\nButton.propTypes={\n    buttonText: PropTypes.string.isRequired,\n}","import styled from \"styled-components\";\n\n\nexport const ErrorInInputContainer=styled.div`\nborder:1px solid grey;\nbackground-color:#ffebeb;\n`\n\nexport const ErrorText=styled.p`\ntext-align:center;\nfont-size:14px;\n`","import PropTypes from 'prop-types';\nimport { ErrorInInputContainer, ErrorText } from \"./ErrorInInput.styled\";\n\nexport const ErrorInInput=({errorMessage})=>{\n    return(<ErrorInInputContainer>\n        <ErrorText>{errorMessage}</ErrorText>\n    </ErrorInInputContainer>)\n}\n\nErrorInInput.propTypes={\n    errorMessage:PropTypes.string.isRequired,\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormContainer","styled","Form","LabelForLogInForm","NameInput","InputLogInForm","useState","email","setEmail","password","setPassword","error","setError","useLogInMutation","logIn","emailId","nanoid","passwordId","rejected","useSelector","authSelectors","onHandleInput","e","currentTarget","name","value","window","alert","resetState","onSubmit","preventDefault","trim","type","onChange","id","placeholder","ErrorInInput","errorMessage","Button","buttonText","ButtonLogAndRegForm","ErrorInInputContainer","ErrorText","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}